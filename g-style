#!/usr/bin/env bash
# G-Style 0.1 — namespace-only, no containers
# Commands: start | stop | restart | status
# - Creates a network namespace (gstyle) and veth pair
# - Starts Mosquitto inside the namespace as a transient systemd unit
# - MQTT health check
# - Clean teardown returns host to default

set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CFG_NS="$ROOT_DIR/config/namespace.yml"
RUNTIME_BASE="/run/gstyle"
RUNTIME_INGEST="$RUNTIME_BASE/ingest"
UNIT_INGEST="gstyle-ingest"

need_cmd() { command -v "$1" >/dev/null 2>&1; }
sudo_or_die() { [[ $EUID -eq 0 ]] || { echo "🔒 sudo required: $1"; exit 1; }; }

ensure_deps() {
  echo "==> Checking dependencies…"
  local to_install=()
  need_cmd ip            || to_install+=(iproute2)
  need_cmd systemctl     || to_install+=(systemd)
  need_cmd yq            || to_install+=(yq)
  need_cmd mosquitto     || to_install+=(mosquitto)
  need_cmd mosquitto_pub || to_install+=(mosquitto-clients)
  if ((${#to_install[@]})); then
    echo "Installing: ${to_install[*]}"
    sudo apt update -y
    sudo apt install -y "${to_install[@]}"
  fi
}

# tiny helper to read values from YAML (requires yq)
yq_val() { yq -r ".$1" "$CFG_NS"; }

print_versions() {
  echo "— Versions —"
  mosquitto -h 2>/dev/null | head -n 1 || echo "mosquitto: (missing)"
  mosquitto_pub -h 2>/dev/null | head -n 1 || echo "mosquitto-clients: (missing)"
  ip -V
  yq --version || true
  echo
}

ns_up() {
  sudo_or_die "create namespace"
  local NS HOST_IF NS_IF HOST_IP NS_IP
  NS="$(yq_val name)"
  HOST_IF="$(yq_val host_if)"
  NS_IF="$(yq_val ns_if)"
  HOST_IP="$(yq_val host_ip_cidr)"
  NS_IP="$(yq_val ns_ip_cidr)"

  ip netns list | grep -qw "$NS" || ip netns add "$NS"
  ip link show "$HOST_IF" &>/dev/null || ip link add "$HOST_IF" type veth peer name "$NS_IF"
  ip link set "$NS_IF" netns "$NS" 2>/dev/null || true

  ip addr flush dev "$HOST_IF" || true
  ip addr add "$HOST_IP" dev "$HOST_IF" || true
  ip link set "$HOST_IF" up

  ip netns exec "$NS" ip link set lo up
  ip netns exec "$NS" ip addr flush dev "$NS_IF" || true
  ip netns exec "$NS" ip addr add "$NS_IP" dev "$NS_IF" || true
  ip netns exec "$NS" ip link set "$NS_IF" up

  mkdir -p "$RUNTIME_INGEST"
  echo "✅ netns up: $NS  host=$HOST_IP  ns=$NS_IP"
}

ns_down() {
  sudo_or_die "delete namespace"
  local NS HOST_IF
  NS="$(yq_val name)"
  HOST_IF="$(yq_val host_if)"

  # stop any remaining procs inside ns (safety)
  for pid in $(ip netns pids "$NS" 2>/dev/null || true); do
    kill -9 "$pid" 2>/dev/null || true
  done

  ip link del "$HOST_IF" 2>/dev/null || true
  ip netns del "$NS" 2>/dev/null || true
  rm -rf "$RUNTIME_BASE" 2>/dev/null || true
  echo "🧹 netns down: $NS (host clean)"
}

ingest_up() {
  local NS NS_IP
  NS="$(yq_val name)"
  # copy config into runtime (kept in tmpfs)
  install -m 644 -D "$ROOT_DIR/config/ingest/mosquitto.conf" "$RUNTIME_INGEST/mosquitto.conf"

  # Start mosquitto as a transient systemd unit *inside the namespace*
  systemd-run --unit="$UNIT_INGEST" --property=Restart=always \
    ip netns exec "$NS" /usr/sbin/mosquitto -c "$RUNTIME_INGEST/mosquitto.conf" >/dev/null

  echo "🚀 ingest: mosquitto running in ns:$NS (port 1883)"
}

ingest_down() {
  systemctl stop "$UNIT_INGEST" 2>/dev/null || true
  echo "🛑 ingest: stopped"
}

mqtt_ping() {
  local NS_IP MSG
  NS_IP="$(yq_val ns_ip_cidr)"; NS_IP="${NS_IP%/*}"
  MSG="hello-$(date +%s)"
  mosquitto_pub -h "$NS_IP" -p 1883 -t gstyle/test -m "$MSG" -r || true
  mosquitto_sub -h "$NS_IP" -p 1883 -t gstyle/test -C 1 -W 2 | grep -q "$MSG" \
    && echo "✅ MQTT round-trip OK" || echo "⚠️  MQTT no response"
}

do_start() {
  echo "==> G-Style start"
  ensure_deps
  print_versions
  ns_up
  ingest_up
  echo; echo "— Health —"
  mqtt_ping
}

do_stop() {
  echo "==> G-Style stop"
  ingest_down
  ns_down
  echo; echo "— Post-stop (host versions) —"
  print_versions
  echo "✅ Host returned to default (no netns, no services)"
}

do_status() {
  echo "— Services —"
  systemctl list-units --type=service --state=running | grep -E "$UNIT_INGEST" || echo "(none)"
  echo; echo "— NetNS —"
  ip netns list 2>/dev/null | grep -q "$(yq_val name)" && echo "$(yq_val name) (present)" || echo "(none)"
  echo; mqtt_ping
}

case "${1:-}" in
  start)   do_start ;;
  stop)    do_stop ;;
  restart) do_stop; echo; do_start ;;
  status)  do_status ;;
  *) echo "Usage: $(basename "$0") {start|stop|restart|status}"; exit 1 ;;
esac
